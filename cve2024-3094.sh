#!/bin/bash

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'

# Set Vision One Region
export TMAS_REGION=ap-southeast-1

# Ask image name and tag, in case not provided it will exit
echo "Enter the image name and tag"
read -r image_name
if [ "$image_name" == "" ]; then
  echo "Please provide the image name and tag"
  exit 1
fi


# If the image does not have a tag, it will set the latest tag
if [[ "$image_name" != *":"* ]]; then
  image_name="$image_name:latest"
fi

# Show a loading message
echo "Scanning the image $image_name"

# Check if the environment variable TMAS_API_KEY is set, in case not set it will exit
if [[ -z "$TMAS_API_KEY" ]]; then
  echo "Please set the TMAS_API_KEY environment variable"
  exit 1
fi

# Test if the image is reachable, in case not reachable it will exit
if !  docker manifest inspect "$image_name" &> /dev/null; then
  echo "Image is not reachable, try it again with the correct image name and tag"
  exit 1
else

# Image scan using tmas and make sure it hide the output
json_output=$(tmas scan docker:"$image_name" -r $TMAS_REGION 2>/dev/null)

# Check if findings.Critical is not null and contains CVE-2024-3094
cve_2024_3094_present=$(echo "$json_output" | jq '.findings.Critical // [] | map(select(.id == "CVE-2024-3094")) | length > 0')

# Check if CVE-2024-3094 is present using jq, in case yes it will return true otherwise false
if [[ "$cve_2024_3094_present" == "true" ]]; then
  echo -e "${RED}CVE-2024-3094 IT IS present in the image $image_name"
else
  echo -e "${GREEN}CVE-2024-3094 IS NOT present in the image $image_name"
fi
fi
